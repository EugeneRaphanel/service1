package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

//import org.springframework.ui.Model;
//import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.Optional;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called pizzaRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private PizzaRepository pizzaRepository;

	/*@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewPizza (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Pizza n = new Pizza();
		n.setName(name);
		n.setEmail(email);
		pizzaRepository.save(n);
		return "Saved";
	}*/

	@GetMapping(path="/pizza")
	public @ResponseBody List<Pizza> getAllPizza() {
		// This returns a JSON or XML with the Pizzas
		Iterable<Pizza> iterable = pizzaRepository.findAll();
		Iterator<Pizza> iterator = iterable.iterator();
		List<Pizza> result = new ArrayList<Pizza>();
    		iterable.forEach(result::add);
    		return result;
	}
	
	  @GetMapping("/pizza/id/{id}")
  	public   @ResponseBody Optional<Pizza> getOnePizza(@PathVariable Integer id) {
    		return pizzaRepository.findById(id);
  }
  
  	@GetMapping("/pizza/name/{name}")
  	public   @ResponseBody Iterable<Pizza> getOnePizza(@PathVariable String name) {
    		return pizzaRepository.findByNameIgnoreCase(name);
  }
  	
 	
 	@DeleteMapping("/pizza/id/{id}")
 	public @ResponseBody Map<String, Boolean> deletePizzaById(@PathVariable Integer id){
 		Map<String, Boolean> response = new HashMap<>();
 		response.put("deleted", Boolean.TRUE);
 		try{
 		pizzaRepository.deleteById(id);
 		}
 		catch( Exception ResourceNotFoundException){
 		response.put("deleted", Boolean.FALSE);
 		}
 		return response;
 	}
 	
 	
 	@PostMapping(path = "/pizza")
	public @ResponseBody Pizza addNewPizza(@RequestParam String name
			, @RequestParam Integer price){
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Pizza n = new Pizza();
		n.setName(name);
		n.setPrice(price);
		return pizzaRepository.save(n);
	
	}
	@PostMapping("/pizza/object")
	public @ResponseBody Pizza createPizza(@RequestBody Pizza u) {
 	return pizzaRepository.save(u);
	}
	
	@PutMapping(path = "/pizza/id/{id}")
	public @ResponseBody Pizza editPizzaById(@PathVariable Integer id, @RequestParam String name, @RequestParam Integer price){
		Pizza n = pizzaRepository.findById(id).get();
		n.setName(name);
		n.setPrice(price);
		return pizzaRepository.save(n);
	}
	
	@PutMapping("/pizza/object/id/{id}")
	public @ResponseBody Pizza editPizzabyObject(@PathVariable Integer id, @RequestBody Pizza u) {
	Pizza n = pizzaRepository.findById(id).get();
	n.setName(u.getName());
	n.setPrice(u.getPrice());
	return pizzaRepository.save(n);
	}
}
